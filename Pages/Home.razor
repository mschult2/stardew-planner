@page "/"
<PageTitle>Stardew Crop Planner</PageTitle>
@using StardewCropCalculatorLibrary

<h3>Stardew Valley Planting Schedule Generator</h3>

<div>
    This website computes the most profitable crop to plant on each day. Just enter the crops you have available to you and press "Generate Calendar".
</div>
<br />

<div>
    <form class="aligned-form">
        <div class="form-row">
            <label>Available Gold:</label>
            <input type="number" @bind="AvailableGold" />
            <span>(0 means unlimited)</span>
        </div>
        <div class="form-row">
            <label>Available Field Tiles:</label>
            <input type="number" @bind="AvailableTiles" />
            <span>(0 means unlimited)</span>
        </div>
    </form>
</div>

<br />

<div>
    <h4>Add Crop</h4>
    <form class="aligned-form">
        <div class="form-row">
            <label>Crop Name:</label>
            <input type="text" @bind="NewCropName" />
        </div>
        <div class="form-row">
            <label>Days to Maturity:</label>
            <input type="number" @bind="NewCropTimeToMaturity" />
        </div>
        <div class="form-row">
            <label>Days Between Harvests:</label>
            <input type="number" @bind="NewCropYieldRate" />
            <span>(leave 0 for single harvest)</span>
        </div>
        <div class="form-row">
            <label>Buy Price:</label>
            <input type="number" @bind="NewCropBuyPrice" />
        </div>
        <div class="form-row">
            <label>Total Sell Price:</label>
            <input type="number" @bind="NewCropSellPrice" />
            <span>(account for plants that yield multiple fruits/veggies in one harvest, like blueberries)</span>
        </div>
    </form>
    <br />
    <button type="button" class="primary-button" disabled="@(IsBusy)" @onclick="AddCrop">Add Crop</button>
</div>



<br />

<div>
    <h4>Crops</h4>
    @if (Crops.Any())
    {
        <ul>
            @foreach (var crop in Crops)
            {
                <li class="crop-item">
                    <div class="crop-content">
                        <span>
                            @crop.name (Matures: @crop.timeToMaturity days, Cost: @crop.buyPrice g, Sell Price: @crop.sellPrice g
                            @(crop.yieldRate > 0 && crop.yieldRate < 1000 ? $", Yield Rate: {crop.yieldRate} days" : ", Yield Rate: N/A"), Profitability-per-tile: @crop.TPI)
                        </span>
                        <button type="button" class="delete-btn" disabled="@(IsBusy)" @onclick="(() => DeleteCrop(crop))">Delete</button>
                    </div>
                </li>
            }
        </ul>
        <button type="button" disabled="@(IsBusy)" @onclick="DeleteAllCrops" class="delete-all-btn">Delete All</button>
    }
    else
    {
        <p>No crops added yet. Add crops to see them here.</p>
    }
</div>



<br />

<div>
    <h4>Conclusion</h4>
    @if (Schedule != null)
    {
        @if (Profit >= 0)
        {
            <p>Your actual Profit is: <strong>@Profit.ToString("N0") gold</strong></p>
        }
        else
        {
            <p>Your actual Profit is: <strong>??</strong> (to see this, set Available Gold)</p>
        }

        @if (!TileLimited)
        {
            <p>Your theoretical Investment Multiple is: <strong>@InvestmentMultiplier.ToString("F1")x</strong></p>
        }

    }
    else
    {
        <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
    }
</div>

<div>
    <h4>Planting Calendar</h4>
    <button disabled="@(IsBusy)" @onclick="GenerateCalendar" class="big-button">Generate Schedule!</button>
    <p></p>
    <div>
        @if (Schedule != null)
        {
            <div class="calendar-container">
                <table class="calendar-table">
                <thead>
                    <tr>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                        <th>Sunday</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int week = 0; week < 4; week++) // 4 weeks
                    {
                        <tr>
                            @for (int dayOfWeek = 1; dayOfWeek <= 7; dayOfWeek++) // 7 days in a week
                            {
                                int day = week * 7 + dayOfWeek;
                                var crops = Schedule.GetCrops(day);
                                var plantingDetails = ScheduleDetails != null && ScheduleDetails.Length > day ? ScheduleDetails[day] : null;
                                var plantingDay = PlantingDays[day] && crops != null && crops.Count > 0;

                                // Determine the class for planting day
                                string cellClass = plantingDay ? "planting-day" : "";

                                <td class="@cellClass">
                                    <div style="position: relative;">
                                        @if (HarvestDays[day])
                                        {
                                            <span class="harvest-marker">Harvest</span>
                                        }
                                        <div><strong>@($"Day {day}{(plantingDay ? " - Plant" : "")}")</strong></div>

                                        @if (crops != null && crops.Count > 0)
                                        {
                                            @for (int cropIndex = 0; cropIndex < crops.Count; ++cropIndex)
                                            {
                                                @if (plantingDetails != null && plantingDetails.cropsNumberToPlant != null && plantingDetails.cropsNumberToPlant.Count > cropIndex && plantingDetails.cropsNumberToPlant[cropIndex] > 0)
                                                {
                                                    <div>@($"{crops[cropIndex]} ({plantingDetails.cropsNumberToPlant[cropIndex]})")</div>
                                                }
                                                else
                                                {
                                                    <div>@($"{crops[cropIndex]}")</div>
                                                }
                                            }
                                        }
                                @*         else
                                        {
                                            <div>No Crop</div>
                                        } *@
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>

                <!-- Spinner Overlay -->
                @if (IsBusy)
                {
                    <div class="calendar-overlay">
                        <div class="spinner"></div>
                        <p style="font-size: 1.5em;" >Loading... Please wait a few seconds</p>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
        }
    </div>
</div>

<br />

<style>
    .primary-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .primary-button:hover {
            background-color: #0a65ad;
    }

    .big-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        color: white;
        border: none;
        padding: 13px 19.5px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        font-size: 1.2em;
    }

        .big-button:hover {
            background-color: #0a65ad;
        }

    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

        .calendar-table th, .calendar-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center; /* Center-align the content for calendar cells */
            vertical-align: top; /* Align content to the top of the cell */
        }

        .calendar-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .calendar-table td {
            height: 180px; /* Ensure consistent height for calendar cells */
            aspect-ratio: 1 / 1; /* Maintain a 1:1 width-to-height ratio */
            min-width: 120px; /* Ensure consistent width */
        }

        /* Highlight planting days */
        .calendar-table .planting-day {
            background-color: #39ff14; /* Neon green */
        }

    /* Style for harvest marker */
    .harvest-marker {
        position: absolute;
        top: 2px;
        left: 2px;
        font-size: 15px;
        font-weight: bold;
        color: #ff9933; /* Orange */
    }

    /* Delete All button style */
    .delete-all-btn {
        margin-top: 10px;
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .delete-all-btn:hover {
            background-color: #ff0000;
        }

    .delete-btn {
        background-color: #ff4d4d; /* Same red background as "Delete All" */
        color: white; /* White text for contrast */
        /*border: none;*/ /* Remove border */
        padding: 3px 10px; /* Smaller padding for reduced height */
        cursor: pointer; /* Pointer cursor on hover */
        border-radius: 4px; /* Slightly rounded corners */
        border: none; /* Remove border */
        width: 100px; /* Ensure consistent width for buttons */
    }

        .delete-btn:hover {
            background-color: #ff0000; /* Darker red on hover */
        }

    /* Align form inputs and labels */
    .aligned-form {
        display: flex;
        flex-direction: column; /* Stack each form row vertically */
        gap: 7px; /* Space between rows */
    }

        .aligned-form .form-row {
            display: flex;
            align-items: center; /* Vertically align items */
            gap: 8px; /* Space between label and input/span */
        }

        .aligned-form label {
            min-width: 150px; /* Ensure consistent label width */
            text-align: right;
            font-weight: bold;
        }

        .aligned-form input {
            flex-grow: 1; /* Let input fields fill available space */
            padding: 2.5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 300px; /* Prevent overly wide inputs */
        }

        .aligned-form span {
            font-size: 0.9em;
            color: #666;
            white-space: nowrap; /* Prevent text from wrapping */
        }

    .crop-item {
        margin-bottom: 2px; /* Add spacing between list items */
    }

    .crop-content {
        display: grid; /* Use CSS Grid */
        grid-template-columns: auto 120px; /* Text takes remaining space; button fixed width */
        align-items: center; /* Vertically align items */
        gap: 10px; /* Add spacing between text and button */
        max-width: 950px; /* Constrain the total width of the container */
    }

    button:disabled,
    input:disabled {
        background-color: #aaa; /* Greyed out background */
        cursor: not-allowed; /* Show a "not allowed" cursor */
        opacity: 0.6; /* Make it look disabled */
    }

    /* Calendar container */
    .calendar-container {
        position: relative; /* Makes it a positioning context for the overlay */
        opacity: 1; /* Normal content visibility */
    }

    /* Overlay */
    .calendar-overlay {
        position: absolute; /* Position relative to .calendar-container */
        top: 0;
        left: 0;
        width: 100%; /* Cover the entire calendar */
        height: 100%; /* Cover the entire calendar */
        background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent background */
        display: flex; /* Center the spinner and message */
        flex-direction: column; /* Stack items vertically */
        justify-content: center;
        align-items: center;
        z-index: 10; /* Ensure it appears above calendar content */
        color: white; /* Text color for the message */
        text-align: center;
    }

    /* Spinner */
    .spinner {
        border: 13px solid #f3f3f3; /* Light grey */
        border-top: 10px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 130px;
        height: 130px;
        animation: spin 1s linear infinite;
        margin-bottom: 20px; /* Space between spinner and text */
    }

    @@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

</style>

@code {
    // Input properties for a new crop
    private string NewCropName = string.Empty;
    private int NewCropTimeToMaturity;
    private int NewCropYieldRate;
    private double NewCropBuyPrice;
    private double NewCropSellPrice;

    // Settings for gold and tiles
    private double AvailableGold = 5000;
    private int AvailableTiles = 100;

    // Default crop list
    private List<Crop> Crops = new()
    {
        new Crop("Blueberry", 13, 4, 80, 150),
        new Crop("Hot Pepper", 5, 3, 40, 40),
        new Crop("Melon", 12, 1000, 80, 250),
        new Crop("Hops", 11, 1, 60, 25),
        new Crop("Tomato", 11, 4, 50, 60),
        new Crop("Radish", 6, 1000, 40, 90),
        new Crop("Poppy", 7, 1000, 100, 140),
        new Crop("Spangle", 8, 1000, 50, 90),
        new Crop("Starfruit", 13, 1000, 400, 750),
        new Crop("Wheat", 4, 1000, 10, 25),
    };
    private PlantSchedule Schedule = null;
    private DayDetails[] ScheduleDetails = new DayDetails[NumDays + 1];

    private const int NumDays = 28; // Stardew Valley season length
    private bool[] PlantingDays = new bool[NumDays + 1];
    private bool[] HarvestDays = new bool[NumDays + 1];
    private double InvestmentMultiplier;
    private double Profit = -1;
    private bool TileLimited;
    private bool IsBusy;

    protected override void OnInitialized()
    {
        // Since it takes a while to populate, don't automatically generate the schedule when the page loads
        // if (Crops != null && Crops.Count > 0)
        //     GenerateCalendar();

        ClearSchedule();
    }

    // Add a new crop to the list
    private void AddCrop()
    {
        if (!string.IsNullOrWhiteSpace(NewCropName))
        {
            int processedYieldRate = NewCropYieldRate;

            if (NewCropYieldRate <= 0)
                processedYieldRate = 1000;

            Crops.Add(new Crop(NewCropName, NewCropTimeToMaturity, processedYieldRate, NewCropBuyPrice, NewCropSellPrice));

            // Clear the form fields
            NewCropName = string.Empty;
            NewCropTimeToMaturity = 0;
            NewCropYieldRate = 0;
            NewCropBuyPrice = 0;
            NewCropSellPrice = 0;
        }
    }

    // Delete a crop from the list
    private void DeleteCrop(Crop crop)
    {
        Crops.Remove(crop);
    }

    // Delete all crops
    private void DeleteAllCrops()
    {
        Crops.Clear();
        ClearSchedule();
    }

    private void ClearSchedule()
    {
        Schedule = new(NumDays); // Clear the schedule
        ScheduleDetails = new DayDetails[NumDays + 1];
        PlantingDays = new bool[NumDays + 1];
        HarvestDays = new bool[NumDays + 1];
    }

    // Generate the planting schedule
    private async void GenerateCalendar()
    {
        ClearSchedule();

        if (!Crops.Any() || AvailableTiles <= 0 || AvailableGold <= 0)
            return;

        IsBusy = true;

        try
        {
            var factory2 = new PlantScheduleFactory2(NumDays);

            var profitAndSchedule = await factory2.GetMostProfitableCrop(1, Crops, AvailableTiles, AvailableGold);

            Profit = profitAndSchedule.Item1;
            var calendar = profitAndSchedule.Item2;

            // Convert Calendar to Schedule
            if (Profit > 0 && calendar != null && calendar.GameStates != null && calendar.GameStates.Count > 0 && calendar.GameStates.ContainsKey(1))
            {
                Console.WriteLine($"\n[NewStrategy] Best profit: {Profit}g");
                for (int day = 1; day <= 28; ++day)
                {
                    var dayState = calendar.GameStates[day];

                    // Currently days-of-interest only represent planting paydays (not harvest days)
                    if (dayState.DayOfInterest && dayState.Plants.Count > 0)
                    {
                        Console.WriteLine($"[NewStrategy] Day {day}: {dayState}");

                        foreach (var batch in dayState.Plants)
                        {
                            if (batch.PlantDay == day && batch.Count > 0)
                            {
                                PlantingDays[day] = true;

                                Schedule.AddCrop(day, batch.CropType);

                                if (ScheduleDetails[day] == null)
                                    ScheduleDetails[day] = new DayDetails() { cropsNumberToPlant = new List<int>() };

                                ScheduleDetails[day].cropsNumberToPlant.Add(batch.Count);

                                foreach (int harvestDay in batch.HarvestDays)
                                    HarvestDays[harvestDay] = true;
                            }
                        }
                    }
                }
            }

            // var factory = new PlantScheduleFactory(NumDays);

            // InvestmentMultiplier = factory.GetBestSchedule(Crops, out PlantSchedule bestSchedule);
            // Schedule = bestSchedule;

            // // Get the planting days
            // try
            // {
            //     factory.GetPlantingDays(out PlantingDays, out HarvestDays);
            // }
            // catch (IndexOutOfRangeException ex)
            // {
            //     Console.WriteLine($"IndexOutOfRangeException error generating planting days: {ex.Message}");
            // }
            // catch (Exception ex)
            // {
            //     Console.WriteLine($"Error generating planting days: {ex.Message}");
            // }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error updating webpage. Exception: {e.Message}");
        }

        IsBusy = false;

        StateHasChanged();
    }
}
