@page "/"
<PageTitle>Stardew Crop Planner</PageTitle>
@using StardewCropCalculatorLibrary

<h3>Stardew Valley Planting Schedule Generator</h3>

<div>
    This website computes the most profitable crop to plant on each day. Just enter the crops you have available to you and press "Generate Calendar".
</div>
<br />

<div>
    <form class="aligned-form">
        <div class="form-row">
            <label>Available Gold:</label>
            <input type="number" @bind="AvailableGold" />
            <span>(0 means unlimited)</span>
        </div>
        <div class="form-row">
            <label>Available Field Tiles:</label>
            <input type="number" @bind="AvailableTiles" />
            <span>(0 means unlimited)</span>
        </div>
    </form>
</div>

<br />

<div>
    <h4>Add Crop</h4>
    <form class="aligned-form">
        <div class="form-row">
            <label>Crop Name:</label>
            <input type="text" @bind="NewCropName" />
        </div>
        <div class="form-row">
            <label>Days to Maturity:</label>
            <input type="number" @bind="NewCropTimeToMaturity" />
        </div>
        <div class="form-row">
            <label>Days Between Harvests:</label>
            <input type="number" @bind="NewCropYieldRate" />
            <span>(leave 0 for single harvest)</span>
        </div>
        <div class="form-row">
            <label>Buy Price:</label>
            <input type="number" @bind="NewCropBuyPrice" />
        </div>
        <div class="form-row">
            <label>Total Sell Price:</label>
            <input type="number" @bind="NewCropSellPrice" />
            <span>(account for plants that yield multiple fruits/veggies in one harvest, like blueberries)</span>
        </div>
    </form>
    <br />
    <button type="button" class="primary-button" disabled="@(IsBusy)" @onclick="AddCrop">Add Crop</button>
</div>

<br />

<div>
    <h4>Crops</h4>
    @if (Crops.Any())
    {
        <ul>
            @foreach (var crop in Crops)
            {
                <li class="crop-item">
                    <div class="crop-content">
                        <span>
                            @crop.name (Matures: @crop.timeToMaturity days, Cost: @crop.buyPrice g, Sell Price: @crop.sellPrice g
                            @(crop.yieldRate > 0 && crop.yieldRate < 1000 ? $", Yield Rate: {crop.yieldRate} days" : ", Yield Rate: N/A"), Profitability-per-tile: @crop.TPI)
                        </span>
                        <button type="button" class="delete-btn" disabled="@(IsBusy)" @onclick="(() => DeleteCrop(crop))">Delete</button>
                    </div>
                </li>
            }
        </ul>
        <button type="button" disabled="@(IsBusy)" @onclick="DeleteAllCrops" class="delete-all-btn">Delete All</button>
    }
    else
    {
        <p>No crops added yet. Add crops to see them here.</p>
    }
</div>

<br />

<div>
    <h4>Planting Schedule</h4>

    <!-- Generate Schedule button -->
    <button disabled="@(IsBusy)" @onclick="GenerateCalendar" class="big-button">Generate Schedule!</button>

    <!-- Calendar -->
    <div>
        @if (Schedule != null)
        {
                <div class="calendar-container">

                    <!-- Profit -->
                    <div class="profit-overlay">
                        @if (Profit >= 0 && Schedule != null)
                        {
                            <p><strong>Profit: @Profit.ToString("N0") gold</strong></p>
                        }
                        else
                        {
                            <p><strong>Profit: N/A</strong></p>
                        }

                        @if (InvestmentMultiplier >= 0 && Schedule != null)
                        {
                            <p><strong>@($"ROI: {((InvestmentMultiplier - 1) * 100).ToString("N0")}%")</strong></p>
                        }
                        else
                        {
                            <p><strong>ROI: N/A</strong></p>
                        }
                    </div>

                    <table class="calendar-table">
                    <thead>
                        <tr>
                            <th>Monday</th>
                            <th>Tuesday</th>
                            <th>Wednesday</th>
                            <th>Thursday</th>
                            <th>Friday</th>
                            <th>Saturday</th>
                            <th>Sunday</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int week = 0; week < 4; week++) // 4 weeks
                        {
                            <tr>
                                @for (int dayOfWeek = 1; dayOfWeek <= 7; dayOfWeek++) // 7 days in a week
                                {
                                    int day = week * 7 + dayOfWeek;
                                    var crops = Schedule.GetCrops(day);
                                    var plantingDetails = ScheduleDetails != null && ScheduleDetails.Length > day ? ScheduleDetails[day] : null;
                                    var plantingDay = PlantingDays[day] && crops != null && crops.Count > 0;

                                    // Determine the class for planting day
                                    string cellClass = plantingDay ? "planting-day" : "";

                                        <td class="@cellClass">
                                        <div style="position: relative;">
                                            @if (HarvestDays[day])
                                            {
                                                <span class="harvest-marker">Harvest</span>
                                            }
                                            <div><strong>@($"Day {day}{(plantingDay ? " - Plant" : "")}")</strong></div>

                                            @if (crops != null && crops.Count > 0)
                                            {
                                                @for (int cropIndex = 0; cropIndex < crops.Count; ++cropIndex)
                                                {
                                                    @if (plantingDetails != null && plantingDetails.cropsNumberToPlant != null && plantingDetails.cropsNumberToPlant.Count > cropIndex && plantingDetails.cropsNumberToPlant[cropIndex] > 0)
                                                    {
                                                        <div>@($"{crops[cropIndex]} ({plantingDetails.cropsNumberToPlant[cropIndex]})")</div>
                                                    }
                                                    else
                                                    {
                                                        <div>@($"{crops[cropIndex]}")</div>
                                                    }
                                                }
                                            }
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>

                    <!-- Spinner Overlay -->
                    @if (IsBusy)
                    {
                        <div class="calendar-overlay">
                            <div class="spinner"></div>
                            <p style="font-size: 1.25em;" >Running simulation... Please wait a few seconds</p>
                        </div>
                    }
                </div>
        }
        else
        {
            <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
        }
    </div>

    <br />

</div>

<style>

    .primary-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .primary-button:hover {
            background-color: #0a65ad;
    }

    .big-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        margin-bottom: 60px; /* Add space below the button */
        color: white;
        border: none;
        padding: 13px 19.5px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
    }

        .big-button:hover {
            background-color: #0a65ad;
        }

    .profit-overlay {
        position: absolute; /* Position relative to the calendar-wrapper */
        top: -7%; /* Center vertically */
        left: 50%; /* Center horizontally */
        transform: translate(-50%, -50%); /* Adjust position to center */
        padding: 10px 20px; /* Add padding for better visibility */
        border-radius: 5px; /* Optional: Rounded corners */
        text-align: center; /* Center the text inside the overlay */
        z-index: 10; /* Ensure it appears above the calendar */
        font-size: 1.2em; /* Adjust font size as needed */
        font-weight: bold; /* Make the text stand out */
    }

    /* Calendar container */
    .calendar-container {
        width: 1400px;
        position: relative; /* Makes it a positioning context for the overlay */
        opacity: 1; /* Normal content visibility */
    }

    .calendar-table {
        width: 1400px;
        border-collapse: collapse;
    }

        .calendar-table th, .calendar-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center; /* Center-align the content for calendar cells */
            vertical-align: top; /* Align content to the top of the cell */
            min-width: 120px; /* Fixed minimum cell width */
            overflow: hidden; /* Prevent content overflow */
        }

        .calendar-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .calendar-table td {
            height: 180px; /* Ensure consistent height for calendar cells */
            aspect-ratio: 1 / 1; /* Maintain a 1:1 width-to-height ratio */
            position: relative;
        }

        /* Highlight planting days */
        .calendar-table .planting-day {
            background-color: #39ff14; /* Neon green */
        }

    /* Style for harvest marker */
    .harvest-marker {
        position: absolute;
        top: 2px;
        left: 0px;
        font-size: 14px;
        font-weight: bold;
        color: #ff9933; /* Orange */
    }

    /* Delete All button style */
    .delete-all-btn {
        margin-top: 10px;
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .delete-all-btn:hover {
            background-color: #ff0000;
        }

    .delete-btn {
        background-color: #ff4d4d; /* Same red background as "Delete All" */
        color: white; /* White text for contrast */
        /*border: none;*/ /* Remove border */
        padding: 3px 10px; /* Smaller padding for reduced height */
        cursor: pointer; /* Pointer cursor on hover */
        border-radius: 4px; /* Slightly rounded corners */
        border: none; /* Remove border */
        width: 100px; /* Ensure consistent width for buttons */
    }

        .delete-btn:hover {
            background-color: #ff0000; /* Darker red on hover */
        }

    /* Align form inputs and labels */
    .aligned-form {
        display: flex;
        flex-direction: column; /* Stack each form row vertically */
        gap: 7px; /* Space between rows */
    }

        .aligned-form .form-row {
            display: flex;
            align-items: center; /* Vertically align items */
            gap: 8px; /* Space between label and input/span */
        }

        .aligned-form label {
            min-width: 150px; /* Ensure consistent label width */
            text-align: right;
            font-weight: bold;
        }

        .aligned-form input {
            flex-grow: 1; /* Let input fields fill available space */
            padding: 2.5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 300px; /* Prevent overly wide inputs */
        }

        .aligned-form span {
            font-size: 0.9em;
            color: #666;
            white-space: nowrap; /* Prevent text from wrapping */
        }

    .crop-item {
        margin-bottom: 2px; /* Add spacing between list items */
    }

    .crop-content {
        display: grid; /* Use CSS Grid */
        grid-template-columns: auto 120px; /* Text takes remaining space; button fixed width */
        align-items: center; /* Vertically align items */
        gap: 10px; /* Add spacing between text and button */
        max-width: 950px; /* Constrain the total width of the container */
    }

    button:disabled,
    input:disabled {
        background-color: #aaa; /* Greyed out background */
        cursor: not-allowed; /* Show a "not allowed" cursor */
        opacity: 0.6; /* Make it look disabled */
    }

    /* Overlay */
    .calendar-overlay {
        position: absolute; /* Position relative to .calendar-container */
        top: 0;
        left: 0;
        width: 100%; /* Cover the entire calendar */
        height: 100%; /* Cover the entire calendar */
        background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent background */
        display: flex; /* Center the spinner and message */
        flex-direction: column; /* Stack items vertically */
        justify-content: center;
        align-items: center;
        z-index: 10; /* Ensure it appears above calendar content */
        color: white; /* Text color for the message */
        text-align: center;
    }

    /* Spinner */
    .spinner {
        border: 13px solid #f3f3f3; /* Light grey */
        border-top: 10px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 130px;
        height: 130px;
        animation: spin 1s linear infinite;
        margin-bottom: 20px; /* Space between spinner and text */
    }

    @@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

</style>

@code {
    public class DayDetails
    {
        // list of crops and their details
        public List<int> cropsNumberToPlant = new List<int>();

        public int totalNumberToPlant
        {
            get
            {
                if (cropsNumberToPlant == null)
                    return 0;

                int total = 0;
                foreach (var numberToPlant in cropsNumberToPlant)
                    total += numberToPlant;

                return total;
            }
        }

        public string ToString(List<Crop> cropList)
        {
            string summary = "";

            if (cropsNumberToPlant.Count == 0)
                return summary;
            else if (cropsNumberToPlant.Count != cropList.Count)
            {
                Console.WriteLine($"[DayDetails] ERROR: input cropList had {cropList.Count} crops, but this DayDetails has {cropsNumberToPlant.Count}.");
                return summary;
            }

            for (int i = 0; i < cropList.Count; ++i)
                summary += $"{cropList[i].name}: {cropsNumberToPlant[i]}, ";

            return summary;
        }
    }

    // Input properties for a new crop
    private string NewCropName = string.Empty;
    private int NewCropTimeToMaturity;
    private int NewCropYieldRate;
    private double NewCropBuyPrice;
    private double NewCropSellPrice;

    // Settings for gold and tiles
    private double AvailableGold = 5000;
    private int AvailableTiles = 100;

    // Default crop list
    private List<Crop> Crops = new()
    {
        new Crop("Blueberry", 13, 4, 80, 150),
        new Crop("Hot Pepper", 5, 3, 40, 40),
        new Crop("Melon", 12, 1000, 80, 250),
        new Crop("Hops", 11, 1, 60, 25),
        new Crop("Tomato", 11, 4, 50, 60),
        new Crop("Radish", 6, 1000, 40, 90),
        new Crop("Poppy", 7, 1000, 100, 140),
        new Crop("Spangle", 8, 1000, 50, 90),
        new Crop("Starfruit", 13, 1000, 400, 750),
        new Crop("Wheat", 4, 1000, 10, 25),

        // new Crop("Blueberry", 13, 4, 80, 150),
        // new Crop("Hot Pepper", 5, 3, 40, 40),
        // new Crop("Radish", 6, 1000, 40, 90),
    };

    private GameStateCalendarFactory calendarFactory = new GameStateCalendarFactory(NumDays);

    private PlantSchedule Schedule = new(NumDays);
    private DayDetails[] ScheduleDetails = new DayDetails[NumDays + 1];

    private const int NumDays = 28; // Stardew Valley season length
    private bool[] PlantingDays = new bool[NumDays + 1];
    private bool[] HarvestDays = new bool[NumDays + 1];
    private double InvestmentMultiplier = -1;
    private double Profit = -1;
    private bool TileLimited;
    private bool IsBusy;

    protected override void OnInitialized()
    {
        // Since it takes a while to populate, don't automatically generate the schedule when the page loads
        // if (Crops != null && Crops.Count > 0)
        //     GenerateCalendar();

        ClearSchedule();
    }

    // Add a new crop to the list
    private void AddCrop()
    {
        if (!string.IsNullOrWhiteSpace(NewCropName))
        {
            int processedYieldRate = NewCropYieldRate;

            if (NewCropYieldRate <= 0)
                processedYieldRate = 1000;

            Crops.Add(new Crop(NewCropName, NewCropTimeToMaturity, processedYieldRate, NewCropBuyPrice, NewCropSellPrice));

            // Clear the form fields
            NewCropName = string.Empty;
            NewCropTimeToMaturity = 0;
            NewCropYieldRate = 0;
            NewCropBuyPrice = 0;
            NewCropSellPrice = 0;
        }
    }

    // Delete a crop from the list
    private void DeleteCrop(Crop crop)
    {
        Crops.Remove(crop);
    }

    // Delete all crops
    private void DeleteAllCrops()
    {
        Crops.Clear();
        ClearSchedule();
    }

    private void ClearSchedule()
    {
        Schedule = new(NumDays); // Clear the schedule
        ScheduleDetails = new DayDetails[NumDays + 1];
        PlantingDays = new bool[NumDays + 1];
        HarvestDays = new bool[NumDays + 1];
        InvestmentMultiplier = -1;
        Profit = -1;
    }


    // Generate the planting schedule
    private async void GenerateCalendar()
    {
        ClearSchedule();

        if (!Crops.Any() || AvailableGold <= 0)
            return;

        IsBusy = true;

        try
        {
            // Calculate schedule with simulation (slow)
            if (AvailableTiles > 0)
            {
                var wealthAndCalendar = await calendarFactory.GetMostProfitableCrop(1, Crops, AvailableTiles, AvailableGold);

                // Copy to UI elements: Profit, ROI
                var totalWealth = wealthAndCalendar.Item1;
                var calendar = wealthAndCalendar.Item2;
                Profit = totalWealth - AvailableGold;
                InvestmentMultiplier = AvailableGold != 0 ? totalWealth / AvailableGold : InvestmentMultiplier;

                // Copy to UI elements: Schedule, ScheduleDetails, PlantingDays/HarvestDays
                if (Profit > 0 && calendar != null && calendar.GameStates != null && calendar.GameStates.Count > 0 && calendar.GameStates.ContainsKey(1))
                {
                    Console.WriteLine($"\n[NewStrategy] Best profit: {Profit}g");
                    for (int day = 1; day <= 28; ++day)
                    {
                        var dayState = calendar.GameStates[day];

                        // Currently days-of-interest only represent planting paydays (not harvest days)
                        if (dayState.DayOfInterest && dayState.Plants.Count > 0)
                        {
                            Console.WriteLine($"[NewStrategy] Day {day}: {dayState}");

                            foreach (var batch in dayState.Plants)
                            {
                                if (batch.PlantDay == day && batch.Count > 0)
                                {
                                    PlantingDays[day] = true;

                                    Schedule.AddCrop(day, batch.CropType);

                                    if (ScheduleDetails[day] == null)
                                        ScheduleDetails[day] = new DayDetails() { cropsNumberToPlant = new List<int>() };

                                    ScheduleDetails[day].cropsNumberToPlant.Add(batch.Count);

                                    foreach (int harvestDay in batch.HarvestDays)
                                    {
                                        HarvestDays[harvestDay] = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Calculate schedule with ROI formula (fast, but doesn't support tile limit)
            else
            {
                var factory = new PlantScheduleFactory(NumDays);

                InvestmentMultiplier = factory.GetBestSchedule(Crops, out PlantSchedule bestSchedule);

                Schedule = bestSchedule;

                // Convert to Profit
                if (AvailableGold > 0)
                    Profit = (InvestmentMultiplier * AvailableGold) - AvailableGold;

                // Convert to PlantingDays/HarvestDays
                factory.GetPlantingDays(out PlantingDays, out HarvestDays);

                // Convert to ScheduleDetails
                if (AvailableGold > 0)
                {
                    double curGold = AvailableGold;

                    GameStateCalendar calendar = new GameStateCalendar(NumDays, AvailableTiles, AvailableGold);

                    calendar.GameStates[0] = new GameState() { Wallet = AvailableGold, };

                    for (int day = 1; day <= NumDays; ++day)
                    {
                        // Copy game state from previous day
                        var prevGameState = calendar.GameStates[day - 1];
                        var curGameState = calendar.GameStates[day] = new GameState();

                        curGameState.Wallet = calendar.GameStates[day - 1].Wallet;

                        foreach (var prevPlantBatch in calendar.GameStates[day - 1].Plants)
                            curGameState.Plants.Add(new PlantBatch(prevPlantBatch));

                        // Buy day
                        if (PlantingDays[day])
                        {
                            var crop = Schedule.GetCrop(day);
                            var unitsToPlant = (int)(curGameState.Wallet / Schedule.GetCrop(day).buyPrice);
                            ScheduleDetails[day] = new DayDetails() { cropsNumberToPlant = new List<int>() { unitsToPlant } };

                            // Subtract gold and add plants
                            curGameState.Wallet = curGameState.Wallet - unitsToPlant * crop.buyPrice;
                            curGameState.Plants.Add(new PlantBatch(crop, unitsToPlant, day));
                        }
                        else
                        {
                            var plantsToRemove = new List<PlantBatch>();

                            foreach (var plantBatch in curGameState.Plants)
                            {
                                // Sell day
                                if (plantBatch.HarvestDays.Contains(day))
                                {
                                    // Add gold
                                    var crop = plantBatch.CropType;
                                    curGameState.Wallet = curGameState.Wallet + plantBatch.Count * crop.sellPrice;

                                    // Subtract plants
                                    if (!plantBatch.Persistent)
                                        plantsToRemove.Add(plantBatch);
                                }
                            }

                            foreach (var plantToRemove in plantsToRemove)
                                curGameState.Plants.Remove(plantToRemove);
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error updating webpage. Exception: {e}");
        }

        IsBusy = false;

        StateHasChanged();
    }
}
