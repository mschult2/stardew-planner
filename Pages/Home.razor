@page "/"
<PageTitle>Stardew Crop Planner</PageTitle>
@using StardewCropCalculatorLibrary

<h3>Stardew Valley Planting Schedule Generator</h3>

<div>
    This website computes the most profitable crop to plant on each day. Just enter the crops available to you and press "Generate Schedule".
</div>
<br />

<div>
    <form class="aligned-form">
        <div class="form-row">
            <label>Available Gold:</label>
            <input type="number" @bind="AvailableGold" />
            <span>(0 means unlimited)</span>
        </div>
        <div class="form-row">
            <label>Available Field Tiles:</label>
            <input type="number" @bind="AvailableTiles" />
            <span>(0 means unlimited)</span>
        </div>
        <div class="form-row">
            <label>Current Day:</label>
            <input type="number" @bind="CurrentDay" />
        </div>
        <div class="form-row">
            <label>Season Length:</label>
            <input type="number" @bind="NumDays" />
        </div>
    </form>
</div>

<br />

<div>
    <h4>Add Crop</h4>
    <form class="aligned-form">
        <div class="form-row">
            <label>Crop Name:</label>
            <input type="text" @bind="NewCropName" />
        </div>
        <div class="form-row">
            <label>Days to Maturity:</label>
            <input type="number" @bind="NewCropTimeToMaturity" />
        </div>
        <div class="form-row">
            <label>Days Between Harvests:</label>
            <input type="number" @bind="NewCropYieldRate" />
            <span>(leave 0 for single harvest)</span>
        </div>
        <div class="form-row">
            <label>Buy Price:</label>
            <input type="number" @bind="NewCropBuyPrice" />
        </div>
        <div class="form-row">
            <label>Total Sell Price:</label>
            <input type="number" @bind="NewCropSellPrice" />
            <span>(account for multiple fruits/veggies in one harvest. example: blueberries are 50g x 3 = 150g)</span>
        </div>
    </form>
    <br />
    <button type="button" class="primary-button" disabled="@(IsBusy)" @onclick="AddCrop">Add Crop</button>
</div>

<br />

<div>
    <h4>Crops</h4>
    @if (Crops.Any())
    {
        <div class="checkbox-row">
            <input type="checkbox" class="select-all-checkbox" @onchange="(e => ToggleAllCrops(e))" />
            <span><i>All</i></span>

            <input type="checkbox" class="season-checkbox" checked @onchange="@(e => ToggleSeasonalCrops("Spring", e))" />
            <span><i>Spring</i></span>

            <input type="checkbox" class="season-checkbox" @onchange="@(e => ToggleSeasonalCrops("Summer", e))" />
            <span><i>Summer</i></span>

            <input type="checkbox" class="season-checkbox" @onchange="@(e => ToggleSeasonalCrops("Fall", e))" />
            <span><i>Fall</i></span>

            <input type="checkbox" class="season-checkbox" @onchange="@(e => ToggleSeasonalCrops("Winter", e))" />
            <span><i>Winter</i></span>
        </div>

        <ul>
            @foreach (var crop in Crops)
            {
                <li class="crop-item @crop.Season?.ToLower()">
                    <div class="crop-content">
                        <input type="checkbox" checked="@crop.IsEnabled" @onchange="(e => ToggleCrop(crop, e))" />
                        <span class="@(!crop.IsEnabled ? "disabled-crop" : "")">
                            @crop.name (Matures: @crop.timeToMaturity days, @(crop.yieldRate > 0 && crop.yieldRate < 1000 ? $"Yield Rate: {crop.yieldRate} days" : "Yield Rate: N/A")
                            , Cost: @crop.buyPrice g,
                            Sell Price: @crop.sellPrice g)
                        </span>
                        <button type="button" class="delete-btn" disabled="@(IsBusy)" @onclick="(() => DeleteCrop(crop))">Delete</button>
                    </div>
                </li>
            }
        </ul>
        <button type="button" disabled="@(IsBusy)" @onclick="DeleteAllCrops" class="delete-all-btn">Delete All</button>
    }
    else
    {
        <p>No crops added yet. Add crops to see them here.</p>
    }
</div>

<br />

<div>
    <h4>Planting Schedule</h4>

    <!-- Generate Schedule button -->
    <button disabled="@(IsBusy)" @onclick="GenerateCalendar" class="big-button">Generate Schedule!</button>

    <!-- Calendar -->
    <div>
        @if (Schedule != null)
        {
                <div class="calendar-container">

                    <!-- Profit -->
                    <div class="profit-overlay">
                        @if (Profit >= 0 && Schedule != null)
                        {
                        <p><strong>Profit: @Profit.ToString("N0") gold</strong></p>
                        }
                        else if (Profit == -2)
                        {
                            <p><strong>Error: out of memory</strong></p>
                        }
                        else
                        {
                            <p><strong>Profit: N/A</strong></p>
                        }

                        @if (InvestmentMultiplier >= 0 && Schedule != null)
                        {
                            <p><strong>@($"ROI: {((InvestmentMultiplier - 1) * 100).ToString("N0")}%")</strong></p>
                        }
                        else if (Profit == -2)
                        {
                        }
                        else
                        {
                            <p><strong>ROI: N/A</strong></p>
                        }
                    </div>

                    <table class="calendar-table">
                    <thead>
                        <tr>
                            <th>Monday</th>
                            <th>Tuesday</th>
                            <th>Wednesday</th>
                            <th>Thursday</th>
                            <th>Friday</th>
                            <th>Saturday</th>
                            <th>Sunday</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int week = 0; week < Math.Ceiling(NumDays / 7.0); ++week) // 4 weeks
                        {
                            int MaxDayOfWeek = Math.Min(NumDays - (week * 7), 7);
                            <tr>
                                @for (int dayOfWeek = 1; dayOfWeek <= MaxDayOfWeek; ++dayOfWeek) // 7 days in a week
                                {
                                    int day = week * 7 + dayOfWeek;
                                    var crops = Schedule.GetCrops(day);
                                    var plantingDetails = ScheduleDetails != null && ScheduleDetails.Length > day ? ScheduleDetails[day] : null;
                                    var plantingDay = PlantingDays[day] && crops != null && crops.Count > 0;

                                    // Determine the class for planting day
                                    string cellClass = plantingDay ? "planting-day" : "";

                                    <td class="@((day < CurrentDay) ? "disabled-day" : "") @cellClass">
                                        <div style="position: relative; height: 100%; width: 100%;">
                                            <!-- Ensure the parent fills the cell -->
                                            @if (HarvestDays[day])
                                            {
                                                <span class="harvest-marker">Harvest</span>
                                            }
                                            <div style="text-align: center; padding-top: 12px;">
                                                <strong>@($"Day {day}{(plantingDay ? " - Plant" : "")}")</strong>
                                            </div>

                                            @if (crops != null && crops.Count > 0)
                                            {
                                                @for (int cropIndex = 0; cropIndex < crops.Count; ++cropIndex)
                                                {
                                                    @if (plantingDetails != null && plantingDetails.cropsNumberToPlant != null && plantingDetails.cropsNumberToPlant.Count > cropIndex && plantingDetails.cropsNumberToPlant[cropIndex] > 0)
                                                    {
                                                        <div style="text-align: center;">@($"{crops[cropIndex]} ({plantingDetails.cropsNumberToPlant[cropIndex].ToString("N0")})")</div>
                                                    }
                                                    else
                                                    {
                                                        <div style="text-align: center;">@($"{crops[cropIndex]}")</div>
                                                    }
                                                }
                                            }
                                        </div>
                                    </td>

                                }
                            </tr>
                        }
                    </tbody>
                </table>

                    <!-- Spinner Overlay -->
                    @if (IsBusy)
                    {
                        <div class="calendar-overlay">
                            <div class="spinner"></div>
                            <p style="font-size: 1.25em;" >Running simulation... Please wait up to 30 seconds</p>
                        </div>
                    }
                </div>
        }
        else
        {
            <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
        }
    </div>

    <br />

</div>

<style>

    .primary-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .primary-button:hover {
            background-color: #0a65ad;
    }

    .big-button {
        background-color: #2196f3; /* Blue */
        margin-top: 10px;
        margin-bottom: 60px; /* Add space below the button */
        color: white;
        border: none;
        padding: 13px 19.5px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
    }

        .big-button:hover {
            background-color: #0a65ad;
        }

    .profit-overlay {
        position: absolute; /* Position relative to the calendar-wrapper */
        top: -7%; /* Center vertically */
        left: 50%; /* Center horizontally */
        transform: translate(-50%, -50%); /* Adjust position to center */
        padding: 10px 20px; /* Add padding for better visibility */
        border-radius: 5px; /* Optional: Rounded corners */
        text-align: center; /* Center the text inside the overlay */
        z-index: 10; /* Ensure it appears above the calendar */
        font-size: 1.2em; /* Adjust font size as needed */
        font-weight: bold; /* Make the text stand out */
    }

    /* Calendar container */
    .calendar-container {
        width: 1400px;
        position: relative; /* Makes it a positioning context for the overlay */
        opacity: 1; /* Normal content visibility */
    }

    .calendar-table {
        width: 1400px;
        border-collapse: collapse;
        table-layout: fixed;
    }

        .calendar-table th, .calendar-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center; /* Center-align the content for calendar cells */
            vertical-align: top; /* Align content to the top of the cell */
            min-width: 120px; /* Fixed minimum cell width */
            overflow: hidden; /* Prevent content overflow */
        }

        .calendar-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .calendar-table td {
            height: 180px; /* Ensure consistent height for calendar cells */
            aspect-ratio: 1 / 1; /* Maintain a 1:1 width-to-height ratio */
            position: relative;
        }

        /* Highlight planting days */
        .calendar-table .planting-day {
            background-color: #39ff14; /* Neon green */
        }

    .disabled-day {
        background-color: #f0f0f0; /* Light gray background */
        color: #a0a0a0; /* Gray text color */
        text-decoration: line-through; /* Optional: Strike-through text */
        pointer-events: none; /* Prevent interactions with disabled cells */
        opacity: 0.5; /* Reduce visual prominence */
    }


    /* Style for harvest marker */
    .harvest-marker {
        position: absolute; /* Position relative to the parent container */
        top: -5px; /* Move it slightly down from the top */
        left: -2px; /* Move it slightly right from the left */
        font-size: 14px; /* Adjust size if needed */
        font-weight: bold; /* Keep it bold */
        color: #ff9933; /* Orange color */
    }

    /* Delete All button style */
    .delete-all-btn {
        margin-top: 10px;
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .delete-all-btn:hover {
            background-color: #ff0000;
        }

    .delete-btn {
        background-color: #ff4d4d; /* Same red background as "Delete All" */
        color: white; /* White text for contrast */
        /*border: none;*/ /* Remove border */
        padding: 3px 10px; /* Smaller padding for reduced height */
        cursor: pointer; /* Pointer cursor on hover */
        border-radius: 4px; /* Slightly rounded corners */
        border: none; /* Remove border */
        width: 100px; /* Ensure consistent width for buttons */
    }

        .delete-btn:hover {
            background-color: #ff0000; /* Darker red on hover */
        }

    /* Align form inputs and labels */
    .aligned-form {
        display: flex;
        flex-direction: column; /* Stack each form row vertically */
        gap: 7px; /* Space between rows */
    }

        .aligned-form .form-row {
            display: flex;
            align-items: center; /* Vertically align items */
            gap: 8px; /* Space between label and input/span */
        }

        .aligned-form label {
            min-width: 150px; /* Ensure consistent label width */
            text-align: right;
            font-weight: bold;
        }

        .aligned-form input {
            flex-grow: 1; /* Let input fields fill available space */
            padding: 2.5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 300px; /* Prevent overly wide inputs */
        }

        .aligned-form span {
            font-size: 0.9em;
            color: #666;
            white-space: nowrap; /* Prevent text from wrapping */
        }

    .crop-item {
        margin-bottom: 2px; /* Add spacing between list items */
    }

        .crop-item.spring {
            color: #2E8B57;
        }
        .crop-item.summer {
            color: #DAA520;
        }
        .crop-item.fall {
            color: #D2691E;
        }
        .crop-item.winter {
            color: #4682B4;
        }

    .crop-content {
        display: grid; /* Use CSS Grid */
        grid-template-columns: auto 1fr 120px; /* Define grid columns */
        grid-template-areas:
            "checkbox text button"; /* Assign grid areas */
        align-items: center; /* Align items vertically */
        gap: 10px; /* Add space between items */
        max-width: 800px; /* Constrain the total width of the container */
    }

        .crop-content input[type="checkbox"] {
            grid-area: checkbox; /* Assign to checkbox area */
            width: 18px; /* Compact size */
            height: 18px; /* Compact size */
            margin: 0; /* Remove default margins */
            cursor: pointer; /* Pointer cursor */
        }

        .crop-content span {
            grid-area: text; /* Assign to text area */
            overflow: hidden; /* Prevent overflow */
            text-overflow: ellipsis; /* Add ellipsis for long text */
            white-space: nowrap; /* Prevent text wrapping */
        }

        .crop-content button {
            grid-area: button; /* Assign to button area */
            justify-self: end; /* Align the button to the right */
        }

    button:disabled,
    input:disabled {
        background-color: #aaa; /* Greyed out background */
        cursor: not-allowed; /* Show a "not allowed" cursor */
        opacity: 0.6; /* Make it look disabled */
    }

    .checkbox-row {
        display: flex;
        align-items: center;
        gap: 10px; /* Space between checkboxes and labels */
        margin-bottom: 10px;
    }

    .select-all-checkbox {
        width: 18px;
        height: 18px;
        cursor: pointer;
        vertical-align: middle;
        margin: 0;
        margin-left: 32px;
    }

    .season-checkbox {
        width: 18px;
        height: 18px;
        cursor: pointer;
        vertical-align: middle;
        margin: 0;
        margin-left: 40px;
    }


    /* Overlay */
    .calendar-overlay {
        position: absolute; /* Position relative to .calendar-container */
        top: 0;
        left: 0;
        width: 100%; /* Cover the entire calendar */
        height: 100%; /* Cover the entire calendar */
        background-color: rgba(0, 0, 0, 0.3); /* Semi-transparent background */
        display: flex; /* Center the spinner and message */
        flex-direction: column; /* Stack items vertically */
        justify-content: center;
        align-items: center;
        z-index: 10; /* Ensure it appears above calendar content */
        color: white; /* Text color for the message */
        text-align: center;
    }

    /* Spinner */
    .spinner {
        border: 13px solid #f3f3f3; /* Light grey */
        border-top: 10px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 130px;
        height: 130px;
        animation: spin 1s linear infinite;
        margin-bottom: 20px; /* Space between spinner and text */
    }

    .disabled-crop {
        color: gray;
        text-decoration: line-through;
    }

    @@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

</style>

@code {
    public class DayDetails
    {
        // list of crops and their details
        public List<int> cropsNumberToPlant = new List<int>();

        public int totalNumberToPlant
        {
            get
            {
                if (cropsNumberToPlant == null)
                    return 0;

                int total = 0;
                foreach (var numberToPlant in cropsNumberToPlant)
                    total += numberToPlant;

                return total;
            }
        }

        public string ToString(List<Crop> cropList)
        {
            string summary = "";

            if (cropsNumberToPlant.Count == 0)
                return summary;
            else if (cropsNumberToPlant.Count != cropList.Count)
            {
                Console.WriteLine($"[DayDetails] ERROR: input cropList had {cropList.Count} crops, but this DayDetails has {cropsNumberToPlant.Count}.");
                return summary;
            }

            for (int i = 0; i < cropList.Count; ++i)
                summary += $"{cropList[i].name}: {cropsNumberToPlant[i]}, ";

            return summary;
        }
    }

    private static readonly List<Crop> DefaultCrops = new()
    {
        /* Spring crops */
        new Crop("Blue Jazz", timeToMaturity: 7, yieldRate: 1000, buyPrice: 30, sellPrice: 50, season: "Spring"),
        new Crop("Cauliflower", timeToMaturity: 12, yieldRate: 1000, buyPrice: 80, sellPrice: 175, season: "Spring"),
        new Crop("Garlic", timeToMaturity: 4, yieldRate: 1000, buyPrice: 40, sellPrice: 60, season: "Spring"),
        new Crop("Kale", timeToMaturity: 6, yieldRate: 1000, buyPrice: 70, sellPrice: 110, season: "Spring"),
        new Crop("Parsnip", timeToMaturity: 4, yieldRate: 1000, buyPrice: 20, sellPrice: 35, season: "Spring"),
        // Potato base sell price 80g, but yields 1.25 units on average.
        new Crop("Potato", timeToMaturity: 6, yieldRate: 1000, buyPrice: 50, sellPrice: 100, season: "Spring"),
        new Crop("Rhubarb", timeToMaturity: 13, yieldRate: 1000, buyPrice: 100, sellPrice: 220, season: "Spring"),
        new Crop("Tulip", timeToMaturity: 6, yieldRate: 1000, buyPrice: 20, sellPrice: 30, season: "Spring"),
        // Rice base sell price 30g, but yields 1.61 on average (until max Farming level 10).
        new Crop("Unmilled Rice", timeToMaturity: 8, yieldRate: 1000, buyPrice: 40, sellPrice: 48.3, season: "Spring"),
        // Can't buy.
        new Crop("Carrot", timeToMaturity: 3, yieldRate: 1000, buyPrice: 0, sellPrice: 35, isEnabled: false, season: "Spring"),
        new Crop("Green Bean", timeToMaturity: 10, yieldRate: 3, buyPrice: 60, sellPrice: 40, season: "Spring"),
        new Crop("Strawberry", timeToMaturity: 8, yieldRate: 4, buyPrice: 100, sellPrice: 120, season: "Spring"),
        new Crop("Coffee Bean", timeToMaturity: 10, yieldRate: 2, buyPrice: 2500, sellPrice: 60, season: "Spring", secondSeason: "Summer"),

        /* Summer crops */
        // PPI comparison. Based on: 2000g, 100t, profit 29.7k.
        // Best 5000g/100t profit I have is 41k.
        new Crop("Blueberry", 13, 4, 80, 150, isEnabled: false, "Summer"), // solo 16k
        new Crop("Hot Pepper", 5, 3, 40, 40, isEnabled: false, "Summer"), // solo 24k
        new Crop("Melon", 12, 1000, 80, 250, isEnabled: false, "Summer"), // solo 17.5k
        new Crop("Hops", 11, 1, 60, 25, isEnabled: false, "Summer"), // solo 13k
        new Crop("Tomato", 11, 4, 50, 60, isEnabled: false, "Summer"), // solo 13.5k
        new Crop("Radish", 6, 1000, 40, 90, isEnabled: false, "Summer"), // solo 17.5k
        new Crop("Poppy", 7, 1000, 100, 140, isEnabled: false, "Summer"), // solo 3.5k
        new Crop("Spangle", 8, 1000, 50, 90, isEnabled: false, "Summer"), // solo 8.5k
        new Crop("Starfruit", 13, 1000, 400, 750, isEnabled: false, "Summer"), // solo 5k
        new Crop("Wheat", 4, 1000, 10, 25, isEnabled: false, "Summer", "Fall"), // solo 7.5k
        new Crop("Corn", 14, 4, 150, 50, isEnabled: false, "Summer", "Fall"), // solo 650 (in the 2nd month you'd make 4.5k)
        // Also note that the sunflow yields every 8 days and dies, but it has an average 100% change of dropping 1 seed.
        // This makes it like a persistent crop with a 9 day yield rate.
        new Crop("Sunflower", timeToMaturity: 8, yieldRate: 9, buyPrice: 200, sellPrice: 80, isEnabled: false, "Summer", "Fall"),

        /* Fall crops */
        new Crop("Artichoke", timeToMaturity: 8, yieldRate: 1000, buyPrice: 30, sellPrice: 160, isEnabled: false, "Fall"),
        new Crop("Bok Choy", timeToMaturity: 4, yieldRate: 1000, buyPrice: 50, sellPrice: 80, isEnabled: false, "Fall"),
        new Crop("Fairy Rose", timeToMaturity: 12, yieldRate: 1000, buyPrice: 200, sellPrice: 290, isEnabled: false, "Fall"),
        new Crop("Pumpkin", timeToMaturity: 13, yieldRate: 1000, buyPrice: 100, sellPrice: 320, isEnabled: false, "Fall"),
        new Crop("Sweet Gem Berry", timeToMaturity: 24, yieldRate: 1000, buyPrice: 1000, sellPrice: 3000, isEnabled: false, "Fall"),
        new Crop("Yam", timeToMaturity: 10, yieldRate: 1000, buyPrice: 60, sellPrice: 160, isEnabled: false, "Fall"),
        // Sells for 75g with yield of 2.11.
        new Crop("Cranberries", timeToMaturity: 7, yieldRate: 5, buyPrice: 240, sellPrice: 158.3, isEnabled: false, "Fall"),
        new Crop("Eggplant", timeToMaturity: 5, yieldRate: 5, buyPrice: 20, sellPrice: 60, isEnabled: false, "Fall"),
        // Can't buy.
        new Crop("Broccoli", timeToMaturity: 8, yieldRate: 4, buyPrice: 0, sellPrice: 70, isEnabled: false, "Fall"),
        new Crop("Grape", timeToMaturity: 10, yieldRate: 3, buyPrice: 60, sellPrice: 80, isEnabled: false, "Fall"),
        new Crop("Beet", timeToMaturity: 6, yieldRate: 1000, buyPrice: 20, sellPrice: 100, isEnabled: false, "Fall"),
        new Crop("Amaranth", timeToMaturity: 7, yieldRate: 1000, buyPrice: 70, sellPrice: 150, isEnabled: false, "Fall"),

        /* Winter crops */
        // Can't buy.
        new Crop("Powdermelon", timeToMaturity: 7, yieldRate: 1000, buyPrice: 0, sellPrice: 20, isEnabled: false, "Winter"),
        // Can plant in any season. Can't buy.
        // A fiber sells for 5g, and produces 5.5 units on average
        new Crop("Fiber", timeToMaturity: 7, yieldRate: 1000, buyPrice: 0, sellPrice: 27.5, isEnabled: false, "Winter"),
    };

    private double AvailableGold = 5000;
    private int AvailableTiles = 100;

    /* Test 1: Answer is a few peps, melon, then a last pep. Profit 167k.
    * SIG DIGIT: 2 sig dig takes 3m19s, 1 sig take takes only 35s!
    * Gold pruning 0.2-0.4 thresh lowers it to 28s. Thresh 0.5 lowers it to 17s. And still accurate!
    * Tree data structure: 1 second!
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 0;

    /* Test 2: Answer is all wheat, ofc. Profit 483k. IM takes 0.2 seconds. */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Wheat", 4, 1000, 10, 25),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 0;

    /* Test 3: Answer is: d1 83 hop, d13 41 tomato, d14 5 star, d15 5 star, d16-d20 41 spangle. Profit 45k.
    * SIG DIGIT WORKS: Takes 40 seconds with sig dig 2, 6 seconds with sig dig 1!
    * Results changed, but trivially. The two days of 5 starfruits were replaced with more 41 spangles.
    * Tree data structure: 0.2 seconds!
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Spangle", 8, 1000, 50, 90),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Starfruit", 13, 1000, 400, 750),
    //     new Crop("Hops", 11, 1, 60, 25),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 0;

    /* Test 4: Answer is D1 Bluberry, ie crop with highest TPI. Profit 2.6k. IM takes <1 second.
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Blueberry", 13, 4, 80, 150),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 5;

    /* Test 5: Realistic Gold/Tiles
    * IM returns: 26k profit. D1 37 pep, D7 18 blue, D10 19 blue, D13 18 melon (or 3 star), d16 8 melon.
    * This answer *may* be correct. At least, it is more profitable than planting only blueberries, since they only get up to using 50 tiles.
    * Takes 7 seconds.
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Wheat", 4, 1000, 10, 25),
    //     new Crop("Starfruit", 13, 1000, 400, 750),
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    // };
    // private double AvailableGold = 1500;
    // private int AvailableTiles = 100;

    /* Test 6: Stress Test
    * ERROR: After 7min and 36,000 operations: "Garbage collector could not allocate 65536u bytes of memory for major heap section". (Browser was only using ~2GB) (17,585 cache hits)
    * Same with cache disabled. Memeory usage 1.75 GB.
    * Ah it's because a Chrome browser tab limits the WebAssembly heap memory to 2 GB. Javascript gets more, 4 GB!
    * Results according to PPI strat, may not be correct: profit 89k. D1 125 pep, D7 125 pep, D10 125 pep, D13 star.
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Radish", 6, 1000, 40, 90),
    //     new Crop("Poppy", 7, 1000, 100, 140),
    //     new Crop("Spangle", 8, 1000, 50, 90),
    //     new Crop("Starfruit", 13, 1000, 400, 750),
    //     new Crop("Wheat", 4, 1000, 10, 25),
    //     new Crop("Corn", 14, 4, 150, 50),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 400;

    /* Test 7: Balanced TG 0.09
    * IM results: profit 102k. D1 125 pep, d7 62 blue, d10 263 wheat, d15 174 melon, d16 63 melon.
    * PPI results: profit 93k. D1 125 pep, D7 125 pep, D10 125 pep, D13 75 melon.
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Radish", 6, 1000, 40, 90),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Wheat", 4, 1000, 10, 25),
    // };
    // private double AvailableGold = 5000;
    // private int AvailableTiles = 450;

    /* Test 8: High TG 0.5
    * PPI results: 51,000,000g. Schedule: D1 1m wheat, D6 250k wheat, D11 156k pep, D17 156k pep, D20 156k rad, D23 31k wheat
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Radish", 6, 1000, 40, 90),
    //     new Crop("Poppy", 7, 1000, 100, 140),
    //     new Crop("Spangle", 8, 1000, 50, 90),
    //     new Crop("Starfruit", 13, 1000, 400, 750),
    //     new Crop("Wheat", 4, 1000, 10, 25),
    //     new Crop("Corn", 14, 4, 150, 50),
    // };
    // private double AvailableGold = 1000000;
    // private int AvailableTiles = 500000;

    /* Test 9: Very High TG 4.0
    */
    // private static readonly List<Crop> DefaultCrops = new()
    // {
    //     new Crop("Blueberry", 13, 4, 80, 150),
    //     new Crop("Hot Pepper", 5, 3, 40, 40),
    //     new Crop("Melon", 12, 1000, 80, 250),
    //     new Crop("Hops", 11, 1, 60, 25),
    //     new Crop("Tomato", 11, 4, 50, 60),
    //     new Crop("Radish", 6, 1000, 40, 90),
    //     new Crop("Poppy", 7, 1000, 100, 140),
    //     new Crop("Spangle", 8, 1000, 50, 90),
    //     new Crop("Starfruit", 13, 1000, 400, 750),
    //     new Crop("Wheat", 4, 1000, 10, 25),
    //     new Crop("Corn", 14, 4, 150, 50),
    // };
    // private double AvailableGold = 100000;
    // private int AvailableTiles = 400000;

    private static readonly string SpringName = "Spring";
    private static readonly string SummerName = "Summer";
    private static readonly string FallName = "Fall";
    private static readonly string WinterName = "Winter";

    private static readonly int DefaultDay = 1;
    private static readonly int DefaultNumDays = 28;

    private int _currentDay = DefaultDay;
    private int CurrentDay
    {
        get => _currentDay;
        set
        {
            if (value < 1 || value >= 28)
            {
                Console.WriteLine($"Ignoring invalid value for Current Day: {value}");
                return;
            }

            if (value != _currentDay)
            {
                _currentDay = value;
                OnCurrentDayChanged();
            }
        }
    }

    private int _numDays = DefaultNumDays;
    private int NumDays
    {
        get => _numDays;
        set
        {
            if (value < 2)
            {
                Console.WriteLine($"Ignoring invalid value for Num Days: {value}");
                return;
            }

            if (value != _numDays)
            {
                _numDays = value;
                OnNumDaysChanged();
            }
        }
    }

    // Input properties for a new crop
    private string NewCropName = string.Empty;
    private int NewCropTimeToMaturity;
    private int NewCropYieldRate;
    private double NewCropBuyPrice;
    private double NewCropSellPrice;

    // Default crop list
    private List<Crop> Crops = new List<Crop>(DefaultCrops);

    private GameStateCalendarFactory calendarFactory = new GameStateCalendarFactory(DefaultNumDays, DefaultCrops, DefaultDay);

    private PlantSchedule Schedule = new(DefaultNumDays);
    private DayDetails[] ScheduleDetails = new DayDetails[DefaultNumDays + 1];

    private bool[] PlantingDays = new bool[DefaultNumDays + 1];
    private bool[] HarvestDays = new bool[DefaultNumDays + 1];
    private double InvestmentMultiplier = -1;
    private double Profit = -1;
    private bool IsBusy;

    private bool allSelected;
    private bool springSelected;
    private bool summerSelected;
    private bool fallSelected;
    private bool winterSelected;

    protected override void OnInitialized()
    {
        ClearSchedule();
    }

    private void OnCurrentDayChanged()
    {
        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
        ClearSchedule();
    }

    private void OnNumDaysChanged()
    {
        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
        ClearSchedule();
    }

    private void ToggleCrop(Crop crop, ChangeEventArgs e)
    {
        crop.IsEnabled = (bool)e.Value;
        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
    }

    private void ToggleAllCrops(ChangeEventArgs e)
    {
        bool isEnabled = (bool)e.Value;

        allSelected = isEnabled;

        UpdateCropEnabledState();
    }

    private void ToggleSeasonalCrops(string season, ChangeEventArgs e)
    {
        bool isEnabled = (bool)e.Value;

        switch (season)
        {
            case "Spring":
                springSelected = isEnabled;
                break;
            case "Summer":
                summerSelected = isEnabled;
                break;
            case "Fall":
                fallSelected = isEnabled;
                break;
            case "Winter":
                winterSelected = isEnabled;
                break;
            default:
                break;
        }

        UpdateCropEnabledState();
    }

    private void UpdateCropEnabledState()
    {
        foreach (var crop in Crops)
        {
            // Make a couple exceptions for crops which can't be purchased and so aren't particularly relevant
            if (crop.name != "Carrot" && crop.name != "Broccoli")
            {
                crop.IsEnabled = allSelected
                || (springSelected && (crop.Season == SpringName || crop.SecondSeason == SpringName))
                || (summerSelected && (crop.Season == SummerName || crop.SecondSeason == SummerName))
                || (fallSelected && (crop.Season == FallName || crop.SecondSeason == FallName))
                || (winterSelected && (crop.Season == WinterName || crop.SecondSeason == WinterName));
            }
        }

        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
    }

    // Add a new crop to the list
    private void AddCrop()
    {
        if (!string.IsNullOrWhiteSpace(NewCropName)
        && NewCropSellPrice > 0 && NewCropBuyPrice >= 0 && NewCropTimeToMaturity > 0 && NewCropYieldRate >= 0
        && NewCropTimeToMaturity < NumDays && NewCropYieldRate < NumDays)
        {
            int processedYieldRate = NewCropYieldRate;

            if (NewCropYieldRate <= 0)
                processedYieldRate = 1000;

            Crops.Insert(0, new Crop(NewCropName, NewCropTimeToMaturity, processedYieldRate, NewCropBuyPrice, NewCropSellPrice));

            // Clear the form fields
            NewCropName = string.Empty;
            NewCropTimeToMaturity = 0;
            NewCropYieldRate = 0;
            NewCropBuyPrice = 0;
            NewCropSellPrice = 0;

            calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
        }
    }

    // Delete a crop from the list
    private void DeleteCrop(Crop crop)
    {
        Crops.Remove(crop);
        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
    }

    // Delete all crops
    private void DeleteAllCrops()
    {
        Crops.Clear();
        ClearSchedule();
        calendarFactory = new GameStateCalendarFactory(NumDays, Crops, CurrentDay);
    }

    private void ClearSchedule()
    {
        Schedule = new(NumDays); // Clear the schedule
        ScheduleDetails = new DayDetails[NumDays + 1];
        PlantingDays = new bool[NumDays + 1];
        HarvestDays = new bool[NumDays + 1];
        InvestmentMultiplier = -1;
        Profit = -1;
    }

    // Generate the planting schedule
    private async void GenerateCalendar()
    {
        ClearSchedule();

        if (!Crops.Any() || AvailableGold < 0)
            return;

        IsBusy = true;

        try
        {
            // Calculate schedule with simulation (slow)
            if (AvailableTiles > 0)
            {
                var wealthAndCalendar = await calendarFactory.GetBestSchedule(AvailableTiles, AvailableGold);

                // Copy to UI elements: Profit, ROI
                var totalWealth = wealthAndCalendar.Item1;
                var calendar = wealthAndCalendar.Item2;
                Profit = totalWealth - AvailableGold;
                Profit = totalWealth == -2 ? -2 : Profit;
                InvestmentMultiplier = AvailableGold != 0 ? totalWealth / AvailableGold : -1;

                // Copy to UI elements: Schedule, ScheduleDetails, PlantingDays/HarvestDays
                if (Profit > 0 && calendar != null && calendar.GameStates != null && calendar.GameStates.Count > 0)
                {
                    for (int day = 1; day <= NumDays; ++day)
                    {
                        if (!calendar.GameStates.ContainsKey(day))
                            continue;

                        var dayState = calendar.GameStates[day];

                        // Currently days-of-interest only represent planting paydays (not harvest days)
                        if (dayState.DayOfInterest && dayState.Plants.Count > 0)
                        {
                            foreach (var batch in dayState.Plants)
                            {
                                if (batch.PlantDay == day && batch.Count > 0)
                                {
                                    PlantingDays[day] = true;

                                    Schedule.AddCrop(day, batch.CropType);

                                    if (ScheduleDetails[day] == null)
                                        ScheduleDetails[day] = new DayDetails() { cropsNumberToPlant = new List<int>() };

                                    ScheduleDetails[day].cropsNumberToPlant.Add(batch.Count);

                                    foreach (int harvestDay in batch.HarvestDays)
                                    {
                                        HarvestDays[harvestDay] = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // Calculate schedule with ROI formula (fast, but doesn't support tile limit)
            else
            {
                var factory = new PlantScheduleFactory(NumDays, CurrentDay);

                InvestmentMultiplier = factory.GetBestSchedule(Crops, out PlantSchedule bestSchedule);

                Schedule = bestSchedule;

                // Convert to Profit
                if (AvailableGold > 0)
                    Profit = (InvestmentMultiplier * AvailableGold) - AvailableGold;

                // Convert to PlantingDays/HarvestDays
                factory.GetPlantingDays(out PlantingDays, out HarvestDays);

                // Convert to ScheduleDetails
                if (AvailableGold > 0)
                {
                    double curGold = AvailableGold;

                    GameStateCalendar calendar = new GameStateCalendar(NumDays, AvailableTiles, AvailableGold);

                    calendar.GameStates[0] = new GameState() { Wallet = AvailableGold, };

                    for (int day = 1; day <= NumDays; ++day)
                    {
                        // Copy game state from previous day
                        var prevGameState = calendar.GameStates[day - 1];
                        var curGameState = calendar.GameStates[day] = new GameState();

                        curGameState.Wallet = calendar.GameStates[day - 1].Wallet;

                        foreach (var prevPlantBatch in calendar.GameStates[day - 1].Plants)
                            curGameState.Plants.Add(new PlantBatch(prevPlantBatch));

                        // Sell day
                        {
                            var plantsToRemove = new List<PlantBatch>();
                            foreach (var plantBatch in curGameState.Plants)
                            {
                                // Sell day
                                if (plantBatch.HarvestDays.Contains(day))
                                {
                                    // Add gold
                                    var crop = plantBatch.CropType;
                                    curGameState.Wallet = curGameState.Wallet + plantBatch.Count * crop.sellPrice;

                                    // Subtract plants
                                    if (!plantBatch.Persistent)
                                        plantsToRemove.Add(plantBatch);
                                }
                            }

                            foreach (var plantToRemove in plantsToRemove)
                                curGameState.Plants.Remove(plantToRemove);
                        }

                        // Buy day
                        if (PlantingDays[day])
                        {
                            var crop = Schedule.GetCrop(day);
                            var unitsToPlant = (int)(curGameState.Wallet / Schedule.GetCrop(day).buyPrice);
                            ScheduleDetails[day] = new DayDetails() { cropsNumberToPlant = new List<int>() { unitsToPlant } };

                            // Subtract gold and add plants
                            curGameState.Wallet = curGameState.Wallet - unitsToPlant * crop.buyPrice;
                            curGameState.Plants.Add(new PlantBatch(crop, unitsToPlant, day, NumDays));
                        }
                    }
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error updating webpage. Exception: {e}");
        }

        IsBusy = false;

        StateHasChanged();
    }
}
