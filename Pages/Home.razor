@page "/"
<PageTitle>Stardew Crop Planner</PageTitle>
@using StardewCropCalculatorLibrary

<h3>Stardew Valley Planting Schedule Generator</h3>

<div>
    This website computes the most profitable crop to plant on each day. Just enter the crops you have available to you and press "Generate Calendar".
</div>
<br />

<div>
    <form>
        <label>
            Available Gold:
            <input type="number" @bind="AvailableGold" />
            (0 means unlimited)
        </label>
        <br />
        <label>
            Available Tiles:
            <input type="number" @bind="AvailableTiles" />
            (0 means unlimited)
        </label>
    </form>
</div>

<br />

<div>
    <h4>Add Crop</h4>
    <form>
        <label>
            Crop Name:
            <input type="text" @bind="NewCropName" />
        </label>
        <br />
        <label>
            Days to Maturity:
            <input type="number" @bind="NewCropTimeToMaturity" />
        </label>
        <br />
        <label>
            Days Between Harvests:
            <input type="number" @bind="NewCropYieldRate" />
            (leave 0 for single harvest)
        </label>
        <br />
        <label>
            Buy Price:
            <input type="number" @bind="NewCropBuyPrice" />
        </label>
        <br />
        <label>
            Total Sell Price:
            <input type="number" @bind="NewCropSellPrice" />
            (account for multiple yield)
        </label>
        <br />
        <button type="button" @onclick="AddCrop">Add Crop</button>
    </form>
</div>

<br />

<div>
    <h4>Crops</h4>
    @if (Crops.Any())
    {
        <ul>
            @foreach (var crop in Crops)
            {
                <li>
                    @crop.name (Matures: @crop.timeToMaturity days, Cost: @crop.buyPrice g, Sell Price: @crop.sellPrice g@(
            crop.yieldRate > 0 && crop.yieldRate < 1000
            ? $", Yield Rate: {crop.yieldRate} days"
            : ", Yield Rate: N/A"))
                    <button type="button" @onclick="(() => DeleteCrop(crop))">Delete</button>
                </li>
            }
        </ul>
        <button type="button" @onclick="DeleteAllCrops" class="delete-all-btn">Delete All</button>
    }
    else
    {
        <p>No crops added yet. Add crops to see them here.</p>
    }
</div>

<br />

<div>
    <h4>Conclusion</h4>
    @if (Schedule != null)
    {
        <p>Your theoretical investment multiplier is: <strong>@InvestmentMultiplier.ToString("F1")</strong></p>

        @if (Profit > 0)
        {
            <p>Your actual profit is: <strong>@Profit.ToString("F0") gold</strong></p>
        }
        else
        {
            <p>Your actual profit is: <strong>??</strong> (to see this, set Available Gold)</p>
        }

    }
    else
    {
        <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
    }
</div>

<div>
    <h4>Planting Calendar</h4>
    <button @onclick="GenerateCalendar">Generate Calendar</button>
    <div>
        <p></p>
        <p>Planting days are highlighted in green. On these days you should have gold from the previous day's harvest, assuming you're gold-limited. If you're space-limited, then you'll have available tiles from the current day's harvest.</p>
        <p>An optimal planting choice is indicated for the other days too, in case you acquire some extra gold.</p>
    </div>

    <div>
        @if (Schedule != null)
        {
            <table class="calendar-table">
                <thead>
                    <tr>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                        <th>Sunday</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int week = 0; week < 4; week++) // 4 weeks
                    {
                        <tr>
                            @for (int dayOfWeek = 1; dayOfWeek <= 7; dayOfWeek++) // 7 days in a week
                            {
                                int day = week * 7 + dayOfWeek;
                                var crop = Schedule.GetCrop(day);
                                var plantingDetails = ScheduleDetails != null ? ScheduleDetails[day] : null;

                                // Determine the class for the cell
                                string cellClass = "";
                                bool plantingDay = PlantingDays[day] && crop != null;
                                bool harvestDay = HarvestDays[day];

                                if (plantingDay && harvestDay)
                                    cellClass = "plant-and-harvest-day"; // Both planting and harvest
                                else if (plantingDay)
                                    cellClass = "planting-day"; // Planting only
                                else if (harvestDay)
                                    cellClass = "harvest-day"; // Harvest only

                                <td class="@cellClass">
                                    <div><strong>Day @day</strong></div>
                                    <div>@(crop != null ? crop.name : "No Crop")</div>
                                    <div>@(plantingDetails != null && plantingDetails.numberToPlant != 0 ? $"(plant {plantingDetails.numberToPlant} seeds)" : "")</div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
        }
    </div>
</div>

<style>
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

        .calendar-table th, .calendar-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center; /* Center-align the content for calendar cells */
            vertical-align: top; /* Align content to the top of the cell */
        }

        .calendar-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .calendar-table td {
            height: 100px; /* Ensure consistent height for calendar cells */
            min-width: 120px; /* Ensure consistent width */
        }

        /* Highlight planting days */
        .calendar-table .planting-day {
            background-color: #39ff14; /* Neon green */
        }

        /* Highlight harvest days */
        .calendar-table .harvest-day {
            background-color: #ffff99; /* Yellow */
        }

        /* Highlight days that are both planting and harvest */
        .calendar-table .plant-and-harvest-day {
            background-color: #ff9933; /* Orange */
        }

    /* Delete All button style */
    .delete-all-btn {
        margin-top: 10px;
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .delete-all-btn:hover {
            background-color: #ff0000;
        }
</style>

@code {
    // Input properties for a new crop
    private string NewCropName = string.Empty;
    private int NewCropTimeToMaturity;
    private int NewCropYieldRate;
    private double NewCropBuyPrice;
    private double NewCropSellPrice;

    // Settings for gold and tiles
    private double AvailableGold = 400;
    private int AvailableTiles = 0;

    // Default crop list
    private List<Crop> Crops = new()
    {
        new Crop("Blueberry", 13, 4, 80, 150),
        new Crop("Hot Pepper", 5, 3, 40, 40),
        new Crop("Melon", 12, 1000, 80, 250),
        new Crop("Hops", 11, 1, 60, 25),
        new Crop("Tomato", 11, 4, 50, 60),
        new Crop("Radish", 6, 1000, 40, 90),
        new Crop("Poppy", 7, 1000, 100, 140),
        new Crop("Spangle", 8, 1000, 50, 90),
        new Crop("Starfruit", 13, 1000, 400, 750)
    };
    private PlantSchedule Schedule;
    private DayDetails[] ScheduleDetails;

    private bool[] PlantingDays;
    private bool[] HarvestDays;
    private const int NumDays = 28; // Stardew Valley season length
    private double InvestmentMultiplier;
    private double Profit;

    protected override void OnInitialized()
    {
        // Automatically generate the calendar when the page loads
        if (Crops != null && Crops.Count > 0)
            GenerateCalendar();
    }

    // Add a new crop to the list
    private void AddCrop()
    {
        if (!string.IsNullOrWhiteSpace(NewCropName))
        {
            int processedYieldRate = NewCropYieldRate;

            if (NewCropYieldRate <= 0)
                processedYieldRate = 1000;

            Crops.Add(new Crop(NewCropName, NewCropTimeToMaturity, processedYieldRate, NewCropBuyPrice, NewCropSellPrice));

            // Clear the form fields
            NewCropName = string.Empty;
            NewCropTimeToMaturity = 0;
            NewCropYieldRate = 0;
            NewCropBuyPrice = 0;
            NewCropSellPrice = 0;
        }
    }

    // Delete a crop from the list
    private void DeleteCrop(Crop crop)
    {
        Crops.Remove(crop);
    }

    // Delete all crops
    private void DeleteAllCrops()
    {
        Crops.Clear();
        Schedule = null; // Clear the schedule
        ScheduleDetails = null;
        PlantingDays = null; // Clear planting days
        HarvestDays = null;
    }

    // Generate the planting schedule
    private void GenerateCalendar()
    {
        if (!Crops.Any())
        {
            return; // No crops to calculate schedule
        }

        var factory = new PlantScheduleFactory(NumDays);

        InvestmentMultiplier = factory.GetBestSchedule(Crops, out PlantSchedule bestSchedule);
        Schedule = bestSchedule;

        // Get the planting days
        try
        {
            PlantingDays = factory.GetPlantingDays();
        }
        catch (IndexOutOfRangeException ex)
        {
            // Log or handle the error as needed
            Console.WriteLine($"Error generating planting days: {ex.Message}");
            PlantingDays = new bool[NumDays + 1]; // Ensure PlantingDays is valid even in error cases
        }

        // Modify schedule if tile limit reached
        ScheduleDetails = new DayDetails[Schedule.MaxDays + 1];
        var tileLimited = factory.LimitSchedule(Crops, AvailableTiles, AvailableGold, Schedule, PlantingDays, ScheduleDetails);

        HarvestDays = new bool[Schedule.MaxDays + 1];

        // Unlimited: can't calculate profit
        if (AvailableTiles <= 0 && AvailableGold <= 0)
        {
            Console.WriteLine("MODE: THEORETICAL");
            Profit = 0;
        }
        // Gold-limited:
        // -Calculate flat profit
        // -Calculate ScheduleDetails
        else if (!tileLimited)
        {
            Console.WriteLine("MODE: GOLD LIMITED");

            var curGold = AvailableGold;

            List<Plant> persistentPlants = new();

            Console.WriteLine($"\nWallet: {curGold}g\n");

            for (int i = 1; i <= Schedule.MaxDays; ++i)
            {
                Console.WriteLine($"~~~ Day {i} ~~~");

                if (PlantingDays[i])
                {
                    Console.WriteLine($"  --> Planting Day");


                    // Buying Day
                    List<Crop> cropList = Schedule.GetCrops(i);

                    if (cropList != null && cropList.Count > 0)
                    {
                        var curCrop = cropList[0];

                        // Buy
                        var unitsPlanted = (int)(curGold / curCrop.buyPrice);
                        var moneySpent = unitsPlanted * curCrop.buyPrice;
                        curGold -= moneySpent;

                        Console.WriteLine($"BUY DAY {i}: Planted {unitsPlanted} {curCrop.name} for {moneySpent}g. Wallet: {curGold}g");

                        // Save recurring crop for next time
                        for (int j = 0; j < unitsPlanted; ++j)
                        {
                            var plant = new Plant(curCrop, i, Schedule.MaxDays, curCrop.timeToMaturity, curCrop.yieldRate);
                            persistentPlants.Add(plant);

                            if (j == 0)
                                Console.WriteLine($"    -> new {plant.Crop.name} will be harvested on: {string.Join(", ", plant.HarvestDays.ToArray())}");

                        }

                        ScheduleDetails[i] = new DayDetails() { numberToPlant = unitsPlanted };
                    }
                }
                else
                {
                    Console.WriteLine($"  --> Non-planting Day");

                    // Selling Day
                    // Can't occur on buying day since we're gold-limited, and so won't have gold until the day after a sale
                    double moneyReceived = 0;
                    int unitsSold = 0;
                    foreach (var persistentPlant in persistentPlants)
                    {
                        if (persistentPlant.HarvestDays.Contains(i))
                        {
                            moneyReceived += persistentPlant.Crop.sellPrice;
                            ++unitsSold;
                            HarvestDays[i] = true;
                        }
                    }

                    if (moneyReceived > 0)
                    {
                        curGold += moneyReceived;
                        Console.WriteLine($"SELL DAY {i}: Sold {unitsSold} plants for {moneyReceived}g. Wallet: {curGold}g");
                    }
                    else
                    {
                        Console.WriteLine($"Normal day {i}");
                    }
                }
            }

            Profit = curGold - AvailableGold;
        }
        // Tile-limited
        // -Calculate flat profit
        // (ScheduleDetails provided)
        else
        {
            Console.WriteLine("\nMODE: TILE LIMITED:\n");

            Profit = 0;

            List<Plant> persistentPlants = new();

            // Console.WriteLine($"\nWallet: {curGold}g\n");

            for (int i = 1; i <= Schedule.MaxDays; ++i)
            {

                // Selling Day
                double moneyReceived = 0;
                int unitsSold = 0;
                List<Plant> plantsToRemove = new List<Plant>();

                foreach (var persistentPlant in persistentPlants)
                {
                    if (persistentPlant.HarvestDays.Contains(i))
                    {
                        moneyReceived += persistentPlant.Crop.sellPrice;
                        ++unitsSold;
                        HarvestDays[i] = true;

                        if (!persistentPlant.Persistent)
                            plantsToRemove.Add(persistentPlant);
                    }
                }

                foreach (var plantToRemove in plantsToRemove)
                    persistentPlants.Remove(plantToRemove);

                if (moneyReceived > 0)
                {
                    Profit += moneyReceived;
                    Console.WriteLine($"SELL DAY {i}: Sold {unitsSold} plants for +{moneyReceived}g. Profit: {Profit}g");
                }

                if (PlantingDays[i])
                {
                    // Buying Day
                    List<Crop> cropList = Schedule.GetCrops(i);
                    int unitsPlanted = ScheduleDetails[i].numberToPlant;

                    if (cropList != null && cropList.Count > 0)
                    {
                        var curCrop = cropList[0];

                        // Buy
                        Profit -= unitsPlanted * curCrop.buyPrice;

                        // Save recurring crop for next time
                        for (int j = 0; j < unitsPlanted; ++j)
                            persistentPlants.Add(new Plant(curCrop, i, Schedule.MaxDays, curCrop.timeToMaturity, curCrop.yieldRate));

                        Console.WriteLine($"BUY DAY {i}: Planted {unitsPlanted} {curCrop.name} for -{unitsPlanted * curCrop.buyPrice}g. Profit: {Profit}g");
                    }
                }
            }

            Console.WriteLine($"\n Profit: {Profit} \n");
        }
    }
}
