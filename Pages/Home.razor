@page "/"
<PageTitle>Stardew Crop Planner</PageTitle>
@using StardewCropCalculatorLibrary

<h3>Stardew Valley Planting Schedule Generator</h3>

<div>
    This website computes the most profitable crop to plant on each day. Just enter the crops you have available to you and press "Generate Calendar".
</div>
<br />

<div>
    @* <h4>Settings</h4> *@
    <form>
        <label>
            Available Gold:
            <input type="number" @bind="AvailableGold" />
            (0 means unlimited)
        </label>
        <br />
        <label>
            Available Tiles:
            <input type="number" @bind="AvailableTiles" />
            (0 means unlimited)
        </label>
    </form>
</div>

<br />

<div>
    <h4>Add Crop</h4>
    <form>
        <label>
            Crop Name:
            <input type="text" @bind="NewCropName" />
        </label>
        <br />
        <label>
            Days to Maturity:
            <input type="number" @bind="NewCropTimeToMaturity" />
        </label>
        <br />
        <label>
            Days Between Harvests:
            <input type="number" @bind="NewCropYieldRate" />
            (leave 0 for single harvest)
        </label>
        <br />
        <label>
            Buy Price:
            <input type="number" @bind="NewCropBuyPrice" />
        </label>
        <br />
        <label>
            Total Sell Price:
            <input type="number" @bind="NewCropSellPrice" />
            (account for multiple yield)
        </label>
        <br />
        <button type="button" @onclick="AddCrop">Add Crop</button>
    </form>
</div>

<br />

<div>
    <h4>Crops</h4>
    @if (Crops.Any())
    {
        <ul>
            @foreach (var crop in Crops)
            {
                <li>
                    @crop.name (Matures: @crop.timeToMaturity days, Cost: @crop.buyPrice g, Sell Price: @crop.sellPrice g@(
            crop.yieldRate > 0 && crop.yieldRate < 1000
            ? $", Yield Rate: {crop.yieldRate} days"
            : ", Yield Rate: N/A"))
                    <button type="button" @onclick="(() => DeleteCrop(crop))">Delete</button>
                </li>
            }
        </ul>
        <button type="button" @onclick="DeleteAllCrops" class="delete-all-btn">Delete All</button>
    }
    else
    {
        <p>No crops added yet. Add crops to see them here.</p>
    }
</div>

<br />

<div>
    <h4>Investment Multiplier</h4>
    @if (Schedule != null)
    {
        <p>Your investment multiplier is: <strong>@InvestmentMultiplier.ToString("F1")</strong></p>

        @if (Profit > 0)
        {
            <p>Your profit is: <strong>@Profit.ToString("F0") gold</strong></p>
        }

    }
    else
    {
        <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
    }
</div>

<div>
    <h4>Planting Calendar</h4>
    <button @onclick="GenerateCalendar">Generate Calendar</button>
    <div>
        <p></p>
        <p>Planting days are highlighted in green. On these days you should have gold from the previous day's harvest, so ideally spend all of it on the indicated crop's seeds and plant them.</p>
        <p>An optimal crop-to-plant is indicated for the other days too, in case you obtain some extra gold on these days.</p>
    </div>

    <div>
        @if (Schedule != null)
        {
            <table class="calendar-table">
                <thead>
                    <tr>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                        <th>Sunday</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int week = 0; week < 4; week++) // 4 weeks
                    {
                        <tr>
                            @for (int dayOfWeek = 1; dayOfWeek <= 7; dayOfWeek++) // 7 days in a week
                            {
                                int day = week * 7 + dayOfWeek;
                                var crop = Schedule.GetCrop(day);

                                <td class="@(PlantingDays[day] && crop != null ? "harvest-day" : "")">
                                    <div><strong>Day @day</strong></div>
                                    <div>@(crop != null ? crop.name : "No Crop")</div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No schedule generated yet. Add crops and click "Generate Schedule."</p>
        }
    </div>
</div>

<style>
    .calendar-table {
        width: 100%;
        border-collapse: collapse;
    }

        .calendar-table th, .calendar-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center; /* Center-align the content for calendar cells */
            vertical-align: top; /* Align content to the top of the cell */
        }

        .calendar-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .calendar-table td {
            height: 100px; /* Ensure consistent height for calendar cells */
            min-width: 120px; /* Ensure consistent width */
        }

        /* Highlight key harvest days */
        .calendar-table .harvest-day {
            background-color: #39ff14; /* Neon green for key harvest days */
        }

    /* Delete All button style */
    .delete-all-btn {
        margin-top: 10px;
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
    }

        .delete-all-btn:hover {
            background-color: #ff0000;
        }
</style>

@code {
    // Input properties for a new crop
    private string NewCropName = string.Empty;
    private int NewCropTimeToMaturity;
    private int NewCropYieldRate;
    private double NewCropBuyPrice;
    private double NewCropSellPrice;

    // Settings for gold and tiles
    private double AvailableGold = 0;
    private int AvailableTiles = 0;

    // Default crop list
    private List<Crop> Crops = new()
    {
        new Crop("Blueberry", 13, 4, 80, 150),
        new Crop("Hot Pepper", 5, 3, 40, 40),
        new Crop("Melon", 12, 1000, 80, 250),
        new Crop("Hops", 11, 1, 60, 25),
        new Crop("Tomato", 11, 4, 50, 60),
        new Crop("Radish", 6, 1000, 40, 90),
        new Crop("Poppy", 7, 1000, 100, 140),
        new Crop("Spangle", 8, 1000, 50, 90),
        new Crop("Starfruit", 13, 1000, 400, 750)
    };
    private PlantSchedule Schedule;
    private bool[] PlantingDays;
    private const int NumDays = 28; // Stardew Valley season length
    private double InvestmentMultiplier;
    private double Profit;

    protected override void OnInitialized()
    {
        // Automatically generate the calendar when the page loads
        if (Crops != null && Crops.Count > 0)
            GenerateCalendar();
    }

    // Add a new crop to the list
    private void AddCrop()
    {
        if (!string.IsNullOrWhiteSpace(NewCropName))
        {
            int processedYieldRate = NewCropYieldRate;

            if (NewCropYieldRate <= 0)
                processedYieldRate = 1000;

            Crops.Add(new Crop(NewCropName, NewCropTimeToMaturity, processedYieldRate, NewCropBuyPrice, NewCropSellPrice));

            // Clear the form fields
            NewCropName = string.Empty;
            NewCropTimeToMaturity = 0;
            NewCropYieldRate = 0;
            NewCropBuyPrice = 0;
            NewCropSellPrice = 0;
        }
    }

    // Delete a crop from the list
    private void DeleteCrop(Crop crop)
    {
        Crops.Remove(crop);
    }

    // Delete all crops
    private void DeleteAllCrops()
    {
        Crops.Clear();
        Schedule = null; // Clear the schedule
        PlantingDays = null; // Clear planting days
    }

    // Generate the planting schedule
    private void GenerateCalendar()
    {
        if (!Crops.Any())
        {
            return; // No crops to calculate schedule
        }

        var factory = new PlantScheduleFactory(NumDays);

        InvestmentMultiplier = factory.GetBestSchedule(Crops, out PlantSchedule bestSchedule);
        Schedule = bestSchedule;

        // Either gold is the limiting factor (normal), or tiles are the limiting factor (special case).
        var tileLimited = false;
        if (!tileLimited)
        {
            if (AvailableGold > 0)
                Profit = (AvailableGold * InvestmentMultiplier) - AvailableGold;
        }

        // Get the planting days with bounds checks
        try
        {
            PlantingDays = factory.GetPlantingDays();
        }
        catch (IndexOutOfRangeException ex)
        {
            // Log or handle the error as needed
            Console.WriteLine($"Error generating planting days: {ex.Message}");
            PlantingDays = new bool[NumDays + 1]; // Ensure PlantingDays is valid even in error cases
        }
    }
}
